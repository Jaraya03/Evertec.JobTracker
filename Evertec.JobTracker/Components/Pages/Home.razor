@page "/"
@rendermode InteractiveServer
@using Evertec.JobTracker.Data.Model
@inject IJobService JobService
@inject IStatusService StatusService
@inject NavigationManager Navigation

<style>
    .page-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 1rem;
    }

    .page-title {
        margin: 0;
        font-weight: 700;
        letter-spacing: .2px;
    }

    .btn-create {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        color: white;
        border: none;
        padding: .6rem 1.5rem;
        border-radius: .8rem;
        font-weight: 600;
        transition: all .3s ease;
        box-shadow: 0 4px 12px rgba(102, 126, 234, 0.3);
        display: inline-block;
    }

        .btn-create:hover {
            transform: translateY(-2px);
            box-shadow: 0 6px 20px rgba(102, 126, 234, 0.4);
        }

    .toolbar {
        display: flex;
        align-items: center;
        gap: .5rem;
        margin-bottom: .75rem;
    }

    .status-select {
        max-width: 220px;
        border-radius: .6rem;
        padding: .45rem .75rem;
    }

    .table-card {
        background: #fff;
        border-radius: 1rem;
        box-shadow: 0 6px 18px rgba(0,0,0,.08);
        overflow: auto;
    }

    .jobs-table {
        margin: 0;
    }

        .jobs-table thead th {
            position: sticky;
            top: 0;
            background: #f8f9fa;
            z-index: 1;
            font-weight: 600;
            text-transform: uppercase;
            font-size: .78rem;
            letter-spacing: .04em;
        }

        .jobs-table th, .jobs-table td {
            padding: .8rem 1rem;
            vertical-align: middle;
            white-space: nowrap;
        }

        .jobs-table tbody tr:hover {
            background: #f6f9ff;
        }

        .jobs-table .id-col {
            color: #6c757d;
            font-weight: 600;
        }

    .text-truncate {
        max-width: 340px;
        overflow: hidden;
        text-overflow: ellipsis;
    }

    .loading {
        display: flex;
        align-items: center;
        gap: .5rem;
    }

    .btn-view-details {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        color: white;
        border: none;
        padding: .4rem .9rem;
        border-radius: .5rem;
        font-weight: 600;
        font-size: .85rem;
        transition: all .3s ease;
        white-space: nowrap;
    }

        .btn-view-details:hover {
            transform: translateY(-1px);
            box-shadow: 0 4px 12px rgba(102, 126, 234, 0.4);
        }
</style>

<div class="page-header">
    <h3 class="page-title">Job List</h3>
    <a href="/job/create" class="btn btn-create" style="text-decoration: none;">
        + New Job
    </a>
</div>

<div class="toolbar">
    <label class="form-label mb-0 me-2">Status:</label>

    <select class="form-select status-select" @onchange="OnStatusChanged">
        @foreach (var s in _statusOptions)
        {
            <option value="@s.StatusCode" selected="@(_statusFilter == s.StatusCode)">@s.StatusCode</option>
        }
    </select>

    <span class="ms-2 text-muted small">Filter: @_statusFilter · Rows: @Filtered.Count()</span>
</div>

@if (_items is null)
{
    <div class="loading">
        <div class="spinner-border" role="status"><span class="visually-hidden">Loading…</span></div>
        <span>Loading jobs…</span>
    </div>
}
else
{
    <div class="table-card">
        <table class="table table-hover align-middle jobs-table">
            <thead>
                <tr>
                    <th>JobId</th>
                    <th>ClientName</th>
                    <th>JobName</th>
                    <th class="text-end">Quantity</th>
                    <th>CurrentStatus</th>
                    <th>CreatedAt</th>
                    <th>SLA MailBy</th>
                    <th>Carrier</th>
                    <th class="text-center">Actions</th>
                </tr>
            </thead>
            <tbody>
                @if (!Filtered.Any())
                {
                    <tr><td colspan="9" class="text-center text-muted py-4">No results</td></tr>
                }
                else
                {
                    @foreach (var p in Filtered)
                    {
                        <tr>
                            <td class="id-col">@p.Id</td>
                            <td>@p.ClientName</td>
                            <td class="text-truncate">@p.JobName</td>
                            <td class="text-end">@p.Quantity.ToString("N0")</td>
                            <td>@p.CurrentStatus</td>
                            <td>
                                <span title="@p.CreatedAt.ToString("yyyy-MM-dd HH:mm")">
                                    @p.CreatedAt.ToLocalTime().ToString("dd MMM yyyy")
                                </span>
                            </td>
                            <td>
                                <span title="@p.SLA_MailBy.ToString("yyyy-MM-dd HH:mm")">
                                    @p.SLA_MailBy.ToLocalTime().ToString("dd MMM yyyy")
                                </span>
                            </td>
                            <td>@p.Carrier</td>
                            <td class="text-center">
                                <button class="btn btn-view-details"
                                        @onclick="@(() => NavigateToDetail(p.Id))">
                                    View Details
                                </button>
                            </td>
                        </tr>
                    }
                }
            </tbody>
        </table>
    </div>
}

@code {
    private List<Job>? _items;

    private List<Status> _statusOptions = new();

    private string _statusFilter = "All";

    protected override async Task OnInitializedAsync()
    {
        var statuses = await StatusService.GetAll();
        _statusOptions = new List<Status>
        {
            new Status { StatusCode = "All" }
        }
        .Concat(statuses)
        .ToList();

        _items = await JobService.GetAllAsync();
    }

    private List<Job> Filtered =>
        (_items ?? Enumerable.Empty<Job>())
            .Where(FilterByStatus)
            .ToList();

    private void OnStatusChanged(ChangeEventArgs e)
    {
        _statusFilter = e.Value?.ToString() ?? "All";
        StateHasChanged();
    }

    private void NavigateToCreate()
    {
        Navigation.NavigateTo("/create");
    }

    private void NavigateToDetail(int jobId)
    {
        Navigation.NavigateTo($"/job/{jobId}");
    }

    private static string Norm(string? s) => (s ?? string.Empty).Trim();

    private bool FilterByStatus(Job j)
    {
        var filter = Norm(_statusFilter);
        if (filter.Equals("All", StringComparison.OrdinalIgnoreCase)) return true;

        var cur = Norm(j.CurrentStatus);

        return cur.Equals(filter, StringComparison.OrdinalIgnoreCase);
    }
}