@page "/job/{JobId:int}"
@rendermode InteractiveServer
@using Evertec.JobTracker.Data.Model
@inject IJobService JobService
@inject IJobStatusHistoryService HistoryService
@inject NavigationManager Navigation

<style>
    .detail-container {
        max-width: 1200px;
        margin: 0 auto;
    }

    .status-exception {
        background: #f8d7da; 
        color: #842029; 
        border: 1px solid #f5c2c7;
    }

    .page-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 2rem;
    }

    .back-btn {
        background: #f8f9fa;
        color: #495057;
        border: 1.5px solid #dee2e6;
        padding: .5rem 1rem;
        border-radius: .6rem;
        font-weight: 600;
        transition: all .3s ease;
        text-decoration: none;
        display: inline-flex;
        align-items: center;
        gap: .5rem;
    }

        .back-btn:hover {
            background: #e9ecef;
            border-color: #adb5bd;
        }

    .page-title {
        margin: 0;
        font-weight: 700;
    }

    .detail-card {
        background: #fff;
        border-radius: 1rem;
        box-shadow: 0 6px 18px rgba(0,0,0,.08);
        padding: 2rem;
        margin-bottom: 1.5rem;
    }

    .card-title {
        font-size: 1.1rem;
        font-weight: 600;
        color: #495057;
        margin-bottom: 1.5rem;
        padding-bottom: .5rem;
        border-bottom: 2px solid #f0f0f0;
    }

    .info-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
        gap: 1.5rem;
    }

    .info-item {
        display: flex;
        flex-direction: column;
    }

    .info-label {
        font-size: .85rem;
        font-weight: 600;
        color: #6c757d;
        text-transform: uppercase;
        letter-spacing: .05em;
        margin-bottom: .4rem;
    }

    .info-value {
        font-size: 1.1rem;
        color: #212529;
        font-weight: 500;
    }

    .status-badge {
        display: inline-block;
        padding: .4rem 1rem;
        border-radius: .6rem;
        font-weight: 600;
        font-size: .9rem;
    }

    .status-received {
        background: #cfe2ff;
        color: #084298;
    }

    .status-printing {
        background: #fff3cd;
        color: #997404;
    }

    .status-inserting {
        background: #cff4fc;
        color: #055160;
    }

    .status-mailed {
        background: #d1e7dd;
        color: #0a3622;
    }

    .status-delivered {
        background: #d1e7dd;
        color: #0a3622;
    }

    .action-buttons {
        display: flex;
        gap: 1rem;
        margin-top: 1.5rem;
        padding-top: 1.5rem;
        border-top: 2px solid #f0f0f0;
    }

    .btn-next-status {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        color: white;
        border: none;
        padding: .7rem 1.5rem;
        border-radius: .8rem;
        font-weight: 600;
        transition: all .3s ease;
        box-shadow: 0 4px 12px rgba(102, 126, 234, 0.3);
    }

        .btn-next-status:hover:not(:disabled) {
            transform: translateY(-2px);
            box-shadow: 0 6px 20px rgba(102, 126, 234, 0.4);
        }

        .btn-next-status:disabled {
            opacity: 0.5;
            cursor: not-allowed;
        }

    .btn-exception {
        background: #dc3545;
        color: white;
        border: none;
        padding: .7rem 1.5rem;
        border-radius: .8rem;
        font-weight: 600;
        transition: all .3s ease;
    }

        .btn-exception:hover {
            background: #bb2d3b;
            transform: translateY(-2px);
        }

    .history-table {
        margin: 0;
    }

        .history-table thead th {
            background: #f8f9fa;
            font-weight: 600;
            text-transform: uppercase;
            font-size: .78rem;
            letter-spacing: .04em;
            padding: .8rem 1rem;
        }

        .history-table td {
            padding: .8rem 1rem;
            vertical-align: middle;
        }

        .history-table tbody tr:hover {
            background: #f6f9ff;
        }

    .modal {
        display: block;
        position: fixed;
        z-index: 1050;
        left: 0;
        top: 0;
        width: 100%;
        height: 100%;
        overflow: auto;
        background-color: rgba(0,0,0,0.4);
    }

    .modal-dialog {
        position: relative;
        margin: 10% auto;
        max-width: 500px;
    }

    .modal-content {
        background-color: #fff;
        border-radius: 1rem;
        box-shadow: 0 10px 40px rgba(0,0,0,0.2);
        padding: 2rem;
    }

    .modal-header {
        border-bottom: 2px solid #f0f0f0;
        padding-bottom: 1rem;
        margin-bottom: 1.5rem;
    }

    .modal-title {
        font-size: 1.3rem;
        font-weight: 700;
        margin: 0;
    }

    .modal-footer {
        display: flex;
        gap: 1rem;
        justify-content: flex-end;
        margin-top: 1.5rem;
        padding-top: 1.5rem;
        border-top: 2px solid #f0f0f0;
    }

    .btn-modal-cancel {
        background: #f8f9fa;
        color: #495057;
        border: 1.5px solid #dee2e6;
        padding: .6rem 1.5rem;
        border-radius: .6rem;
        font-weight: 600;
    }

    .btn-modal-submit {
        background: #dc3545;
        color: white;
        border: none;
        padding: .6rem 1.5rem;
        border-radius: .6rem;
        font-weight: 600;
    }

    .loading {
        display: flex;
        justify-content: center;
        align-items: center;
        min-height: 400px;
        gap: .5rem;
    }

    .alert {
        border-radius: .8rem;
        padding: 1rem 1.5rem;
        margin-bottom: 1.5rem;
        border: none;
    }

    .alert-success {
        background: #d4edda;
        color: #155724;
    }

    .alert-danger {
        background: #f8d7da;
        color: #721c24;
    }
</style>

@if (_job is null)
{
    <div class="loading">
        <div class="spinner-border" role="status"></div>
        <span>Loading job details…</span>
    </div>
}
else
{
    <div class="detail-container">
        <div class="page-header">
            <a href="/" class="back-btn">
                ← Back to List
            </a>
            <h3 class="page-title">Job #@_job.Id</h3>
        </div>

        @if (!string.IsNullOrEmpty(_successMessage))
        {
            <div class="alert alert-success">
                ✓ @_successMessage
            </div>
        }

        @if (!string.IsNullOrEmpty(_errorMessage))
        {
            <div class="alert alert-danger">
                 @_errorMessage
            </div>
        }

        <div class="detail-card">
            <h4 class="card-title">Job Information</h4>

            <div class="info-grid">
                <div class="info-item">
                    <span class="info-label">Client Name</span>
                    <span class="info-value">@_job.ClientName</span>
                </div>
                <div class="info-item">
                    <span class="info-label">Job Name</span>
                    <span class="info-value">@_job.JobName</span>
                </div>
                <div class="info-item">
                    <span class="info-label">Quantity</span>
                    <span class="info-value">@_job.Quantity.ToString("N0")</span>
                </div>
                <div class="info-item">
                    <span class="info-label">Carrier</span>
                    <span class="info-value">@_job.Carrier</span>
                </div>
                <div class="info-item">
                    <span class="info-label">Current Status</span>
                    <span class="info-value">
                        <span class="status-badge status-@_job.CurrentStatus.ToLower()">
                            @_job.CurrentStatus
                        </span>
                    </span>
                </div>
                <div class="info-item">
                    <span class="info-label">Created At</span>
                    <span class="info-value">@_job.CreatedAt.ToString("dd MMM yyyy HH:mm")</span>
                </div>
                <div class="info-item">
                    <span class="info-label">SLA Mail By</span>
                    <span class="info-value">@_job.SLA_MailBy.ToString("dd MMM yyyy HH:mm")</span>
                </div>
            </div>

            <div class="action-buttons">
                <button class="btn btn-next-status"
                        @onclick="HandleNextStatus"
                        disabled="@(_isProcessing || _job.CurrentStatus.Trim() == "Delivered" || _job.CurrentStatus.Trim() == "Exception")">
                    @if (_isProcessing)
                    {
                        <span class="spinner-border spinner-border-sm me-2"></span>
                        <span>Processing...</span>
                    }
                    else
                    {
                        <span>Next Status -></span>
                    }
                </button>
                <button class="btn btn-exception" @onclick="OpenExceptionModal">
                    Exception
                </button>
            </div>
        </div>

        <div class="detail-card">
            <h4 class="card-title">Status History</h4>

            @if (_history is null)
            {
                <div class="text-center py-3">
                    <div class="spinner-border spinner-border-sm" role="status"></div>
                    <span class="ms-2">Loading history...</span>
                </div>
            }
            else if (!_history.Any())
            {
                <p class="text-muted text-center py-3">No status history available</p>
            }
            else
            {
                <table class="table history-table">
                    <thead>
                        <tr>
                            <th>Status</th>
                            <th>Changed At</th>
                            <th>Note</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var h in _history.OrderByDescending(x => x.ChangedAt))
                        {
                            <tr>
                                <td>
                                    <span class="status-badge status-@h.Status.ToLower()">
                                        @h.Status
                                    </span>
                                </td>
                                <td>@h.ChangedAt.ToString("dd MMM yyyy HH:mm")</td>
                                <td>@(string.IsNullOrEmpty(h.Note) ? "-" : h.Note)</td>
                            </tr>
                        }
                    </tbody>
                </table>
            }
        </div>
    </div>

    @if (_showExceptionModal)
    {
        <div class="modal" @onclick="CloseExceptionModal">
            <div class="modal-dialog" @onclick:stopPropagation="true">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">Report Exception</h5>
                    </div>
                    <div class="modal-body">
                        <div class="form-group">
                            <label class="form-label">Exception Note</label>
                            <textarea class="form-control"
                                      rows="4"
                                      placeholder="Describe the exception..."
                                      @bind="_exceptionNote"></textarea>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button class="btn btn-modal-cancel" @onclick="CloseExceptionModal">
                            Cancel
                        </button>
                        <button class="btn btn-modal-submit"
                                @onclick="SubmitException"
                                disabled="@(string.IsNullOrWhiteSpace(_exceptionNote) || _isProcessing)">
                            @if (_isProcessing)
                            {
                                <span class="spinner-border spinner-border-sm me-2"></span>
                                <span>Saving...</span>
                            }
                            else
                            {
                                <span>Submit Exception</span>
                            }
                        </button>
                    </div>
                </div>
            </div>
        </div>
    }
}

@code {
    [Parameter]
    public int JobId { get; set; }

    private Job? _job;
    private List<JobStatusHistory>? _history;
    private bool _isProcessing = false;
    private bool _showExceptionModal = false;
    private string _exceptionNote = string.Empty;
    private string _successMessage = string.Empty;
    private string _errorMessage = string.Empty;

    private readonly string[] _statusFlow =
        new[] { "Received", "Printing", "Inserting", "Mailed", "Delivered" };

    protected override async Task OnInitializedAsync()
    {
        await LoadJobData();
    }

    private async Task LoadJobData()
    {
        try
        {
            _job = await JobService.GetByIdAsync(JobId);

            _history = await HistoryService.GetByJobIdAsync(JobId);
        }
        catch (Exception ex)
        {
            _errorMessage = $"Error loading job: {ex.Message}";
        }
    }

    private async Task HandleNextStatus()
    {
        if (_job is null) return;

        _isProcessing = true;
        _errorMessage = string.Empty;
        _successMessage = string.Empty;

        try
        {
            string newStatus = await JobService.AdvanceToNextStatusAsync(_job.Id);

            _successMessage = $"Status updated to {newStatus}!";

            await LoadJobData();
        }
        catch (Exception ex)
        {
            _errorMessage = $"Error updating status: {ex.Message}";
        }
        finally
        {
            _isProcessing = false;
        }
    }

    private void OpenExceptionModal()
    {
        _showExceptionModal = true;
        _exceptionNote = string.Empty;
    }

    private void CloseExceptionModal()
    {
        _showExceptionModal = false;
        _exceptionNote = string.Empty;
    }

    private async Task SubmitException()
    {
        if (_job is null || string.IsNullOrWhiteSpace(_exceptionNote)) return;

        _isProcessing = true;
        _errorMessage = string.Empty;
        _successMessage = string.Empty;

        try
        {
            
            await JobService.SetExceptionStatusAsync(_job.Id, _exceptionNote);

            _successMessage = "Exception reported successfully!";
            _showExceptionModal = false;
            _exceptionNote = string.Empty;

            await LoadJobData();

        }
        catch (Exception ex)
        {
            _errorMessage = $"Error reporting exception: {ex.Message}";
        }
        finally
        {
            _isProcessing = false;
        }
    }
}